# TaskFlow CI/CD Pipeline
# üöÄ Environment-aware testing and deployment

name: TaskFlow Tests & Deploy

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CI: true
  NODE_VERSION: "18"

jobs:
  # Development Tests (Mock services)
  dev-tests:
    name: üîß Development Tests
    runs-on: ubuntu-latest
    environment: development

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run development tests
        env:
          NODE_ENV: development
          REACT_APP_IS_DEV_MODE: true
          REACT_APP_USE_MOCK_CLAUDE: true
          REACT_APP_CSP_ENABLED: false
        run: |
          echo "üß™ Running development tests with mocks..."
          npm run test:dev

  # Staging Tests (Real services)
  staging-tests:
    name: üéØ Staging Tests
    runs-on: ubuntu-latest
    environment: staging
    needs: dev-tests

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install chromium

      - name: Run staging tests
        env:
          NODE_ENV: production
          REACT_APP_ENVIRONMENT: staging
          REACT_APP_IS_DEV_MODE: false
          REACT_APP_USE_MOCK_CLAUDE: false
          REACT_APP_CSP_ENABLED: true
          # Staging URLs and secrets would be set in GitHub Secrets
          REACT_APP_API_URL: https://taskflow-backend-staging.vercel.app
        run: |
          echo "üé≠ Running staging tests with real services..."
          npm run test:ci

  # Build & Deploy
  build-deploy:
    name: üöÄ Build & Deploy
    runs-on: ubuntu-latest
    needs: [dev-tests, staging-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        env:
          NODE_ENV: production
          REACT_APP_ENVIRONMENT: production
          REACT_APP_IS_DEV_MODE: false
          REACT_APP_CSP_ENABLED: true
        run: npm run build:prod

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"

  # Production Smoke Tests
  prod-smoke-tests:
    name: üí® Production Smoke Tests
    runs-on: ubuntu-latest
    needs: build-deploy
    environment: production

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run production smoke tests
        env:
          NODE_ENV: production
          REACT_APP_ENVIRONMENT: production
          REACT_APP_API_URL: https://taskflow-backend.vercel.app
        run: |
          echo "üí® Running production smoke tests..."
          npm run test:prod

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Production smoke tests failed! Alert the team."
          # Here you could send Slack/Discord notifications
