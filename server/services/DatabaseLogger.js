const fs = require('fs').promises;
const path = require('path');

class DatabaseLogger {
  constructor() {
    this.logsDir = path.join(__dirname, '../logs');
    this.authLogFile = path.join(this.logsDir, 'auth-attempts.json');
    this.sessionLogFile = path.join(this.logsDir, 'active-sessions.json');
    this.deviceLogFile = path.join(this.logsDir, 'device-info.json');
    
    this.initializeLogFiles();
  }

  async initializeLogFiles() {
    try {
      // ◊ô◊¶◊ô◊®◊™ ◊™◊ô◊ß◊ô◊ô◊™ ◊ú◊ï◊í◊ô◊ù ◊ê◊ù ◊ú◊ê ◊ß◊ô◊ô◊û◊™
      await fs.mkdir(this.logsDir, { recursive: true });
      
      // ◊ô◊¶◊ô◊®◊™ ◊ß◊ë◊¶◊ô ◊ú◊ï◊í ◊ê◊ù ◊ú◊ê ◊ß◊ô◊ô◊û◊ô◊ù
      const files = [this.authLogFile, this.sessionLogFile, this.deviceLogFile];
      
      for (const file of files) {
        try {
          await fs.access(file);
        } catch {
          await fs.writeFile(file, JSON.stringify([], null, 2));
        }
      }
      
      console.log('‚úÖ Database logger initialized');
    } catch (error) {
      console.error('‚ùå Failed to initialize database logger:', error);
    }
  }

  // ◊®◊ô◊©◊ï◊ù ◊†◊ô◊°◊ô◊ï◊ü ◊î◊™◊ó◊ë◊®◊ï◊™
  async logAuthAttempt(data) {
    const logEntry = {
      id: require('uuid').v4(),
      timestamp: new Date().toISOString(),
      success: data.success,
      userId: data.userId || null,
      email: data.email || null,
      ip: data.ip,
      userAgent: data.userAgent?.substring(0, 500) || 'unknown',
      method: data.method || 'google',
      sessionId: data.sessionId || null,
      deviceFingerprint: data.deviceFingerprint || null,
      errorMessage: data.errorMessage || null,
      responseTime: data.responseTime || null,
      location: data.location || null, // ◊ô◊™◊ï◊ï◊°◊£ ◊ë◊¢◊™◊ô◊ì
      suspicious: data.suspicious || false
    };

    try {
      const logs = await this.readLogFile(this.authLogFile);
      logs.push(logEntry);
      
      // ◊©◊û◊ô◊®◊™ 1000 ◊ú◊ï◊í◊ô◊ù ◊ê◊ó◊®◊ï◊†◊ô◊ù ◊ë◊ú◊ë◊ì
      const recentLogs = logs.slice(-1000);
      await fs.writeFile(this.authLogFile, JSON.stringify(recentLogs, null, 2));
      
      console.log(`üìã Auth attempt logged: ${data.success ? 'SUCCESS' : 'FAILED'} - ${data.email || 'unknown'} from ${data.ip}`);
      
      return logEntry;
    } catch (error) {
      console.error('‚ùå Failed to log auth attempt:', error);
      return null;
    }
  }

  // ◊®◊ô◊©◊ï◊ù ◊û◊ô◊ì◊¢ ◊û◊õ◊©◊ô◊®
  async logDeviceInfo(data) {
    const deviceEntry = {
      id: require('uuid').v4(),
      timestamp: new Date().toISOString(),
      userId: data.userId,
      deviceFingerprint: data.deviceFingerprint,
      ip: data.ip,
      userAgent: data.userAgent?.substring(0, 500) || 'unknown',
      isNewDevice: data.isNewDevice || false,
      location: data.location || null,
      suspicious: data.suspicious || false,
      browserInfo: {
        language: data.language || null,
        platform: data.platform || null,
        screenResolution: data.screenResolution || null,
        timezone: data.timezone || null
      },
      lastSeen: new Date().toISOString(),
      trustLevel: data.trustLevel || 'unknown' // low, medium, high
    };

    try {
      const devices = await this.readLogFile(this.deviceLogFile);
      
      // ◊ë◊ì◊ô◊ß◊î ◊ê◊ù ◊î◊û◊õ◊©◊ô◊® ◊õ◊ë◊® ◊ß◊ô◊ô◊ù (◊¢◊ì◊õ◊ï◊ü ◊ë◊û◊ß◊ï◊ù ◊î◊ï◊°◊§◊î)
      const existingIndex = devices.findIndex(d => 
        d.deviceFingerprint === deviceEntry.deviceFingerprint && 
        d.userId === deviceEntry.userId
      );

      if (existingIndex >= 0) {
        devices[existingIndex] = { ...devices[existingIndex], ...deviceEntry };
        console.log(`üîÑ Device info updated for user ${data.userId}`);
      } else {
        devices.push(deviceEntry);
        console.log(`üÜï New device registered for user ${data.userId}`);
      }
      
      // ◊©◊û◊ô◊®◊™ 500 ◊û◊õ◊©◊ô◊®◊ô◊ù ◊ê◊ó◊®◊ï◊†◊ô◊ù
      const recentDevices = devices.slice(-500);
      await fs.writeFile(this.deviceLogFile, JSON.stringify(recentDevices, null, 2));
      
      return deviceEntry;
    } catch (error) {
      console.error('‚ùå Failed to log device info:', error);
      return null;
    }
  }

  // ◊†◊ô◊î◊ï◊ú ◊°◊©◊†◊ô◊ù ◊§◊¢◊ô◊ú◊ô◊ù
  async logActiveSession(data) {
    const sessionEntry = {
      sessionId: data.sessionId,
      userId: data.userId,
      email: data.email,
      ip: data.ip,
      userAgent: data.userAgent?.substring(0, 200) || 'unknown',
      deviceFingerprint: data.deviceFingerprint || null,
      startTime: new Date().toISOString(),
      lastActivity: new Date().toISOString(),
      expiresAt: data.expiresAt,
      active: true,
      location: data.location || null
    };

    try {
      const sessions = await this.readLogFile(this.sessionLogFile);
      
      // ◊î◊°◊®◊™ ◊°◊©◊†◊ô◊ù ◊ô◊©◊†◊ô◊ù ◊©◊ú ◊ê◊ï◊™◊ï ◊û◊©◊™◊û◊© (◊ê◊ù ◊®◊ï◊¶◊ô◊ù ◊ú◊î◊í◊ë◊ô◊ú ◊ú-1 ◊°◊©◊ü ◊ë◊ú◊ë◊ì)
      // const filteredSessions = sessions.filter(s => s.userId !== data.userId);
      
      // ◊î◊ï◊°◊§◊™ ◊î◊°◊©◊ü ◊î◊ó◊ì◊©
      sessions.push(sessionEntry);
      
      // ◊†◊ô◊ß◊ï◊ô ◊°◊©◊†◊ô◊ù ◊§◊í◊ô ◊™◊ï◊ß◊£
      const now = new Date();
      const activeSessions = sessions.filter(s => new Date(s.expiresAt) > now);
      
      await fs.writeFile(this.sessionLogFile, JSON.stringify(activeSessions, null, 2));
      
      console.log(`üîê Active session logged for user ${data.userId}`);
      return sessionEntry;
    } catch (error) {
      console.error('‚ùå Failed to log active session:', error);
      return null;
    }
  }

  // ◊ß◊ë◊ú◊™ ◊ú◊ï◊í◊ô ◊î◊™◊ó◊ë◊®◊ï◊™ (◊ú◊û◊ò◊®◊ï◊™ ◊ì◊©◊ë◊ï◊®◊ì)
  async getAuthLogs(filters = {}) {
    try {
      const logs = await this.readLogFile(this.authLogFile);
      
      let filteredLogs = logs;
      
      // ◊°◊ô◊†◊ï◊ü ◊ú◊§◊ô ◊™◊ê◊®◊ô◊ö
      if (filters.fromDate) {
        filteredLogs = filteredLogs.filter(log => 
          new Date(log.timestamp) >= new Date(filters.fromDate)
        );
      }
      
      if (filters.toDate) {
        filteredLogs = filteredLogs.filter(log => 
          new Date(log.timestamp) <= new Date(filters.toDate)
        );
      }
      
      // ◊°◊ô◊†◊ï◊ü ◊ú◊§◊ô ◊î◊¶◊ú◊ó◊î/◊õ◊ô◊©◊ú◊ï◊ü
      if (filters.success !== undefined) {
        filteredLogs = filteredLogs.filter(log => log.success === filters.success);
      }
      
      // ◊°◊ô◊†◊ï◊ü ◊ú◊§◊ô ◊û◊©◊™◊û◊©
      if (filters.userId) {
        filteredLogs = filteredLogs.filter(log => log.userId === filters.userId);
      }
      
      // ◊°◊ô◊†◊ï◊ü ◊ú◊§◊ô IP
      if (filters.ip) {
        filteredLogs = filteredLogs.filter(log => log.ip === filters.ip);
      }
      
      // ◊û◊ô◊ï◊ü ◊ú◊§◊ô ◊™◊ê◊®◊ô◊ö (◊î◊ó◊ì◊© ◊ë◊ô◊ï◊™◊® ◊®◊ê◊©◊ï◊ü)
      return filteredLogs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    } catch (error) {
      console.error('‚ùå Failed to get auth logs:', error);
      return [];
    }
  }

  // ◊ß◊ë◊ú◊™ ◊°◊©◊†◊ô◊ù ◊§◊¢◊ô◊ú◊ô◊ù
  async getActiveSessions(userId = null) {
    try {
      const sessions = await this.readLogFile(this.sessionLogFile);
      const now = new Date();
      
      // ◊°◊ô◊†◊ï◊ü ◊°◊©◊†◊ô◊ù ◊§◊¢◊ô◊ú◊ô◊ù ◊ë◊ú◊ë◊ì
      let activeSessions = sessions.filter(s => 
        s.active && new Date(s.expiresAt) > now
      );
      
      // ◊°◊ô◊†◊ï◊ü ◊ú◊§◊ô ◊û◊©◊™◊û◊© ◊ê◊ù ◊†◊ì◊®◊©
      if (userId) {
        activeSessions = activeSessions.filter(s => s.userId === userId);
      }
      
      return activeSessions;
    } catch (error) {
      console.error('‚ùå Failed to get active sessions:', error);
      return [];
    }
  }

  // ◊°◊ò◊ò◊ô◊°◊ò◊ô◊ß◊ï◊™ ◊ê◊ë◊ò◊ó◊î
  async getSecurityStats(timeFrame = 24) { // ◊©◊¢◊ï◊™ ◊ê◊ó◊®◊ï◊†◊ï◊™
    try {
      const logs = await this.readLogFile(this.authLogFile);
      const since = new Date(Date.now() - timeFrame * 60 * 60 * 1000);
      
      const recentLogs = logs.filter(log => new Date(log.timestamp) >= since);
      
      const stats = {
        totalAttempts: recentLogs.length,
        successfulLogins: recentLogs.filter(log => log.success).length,
        failedLogins: recentLogs.filter(log => !log.success).length,
        uniqueUsers: new Set(recentLogs.filter(log => log.userId).map(log => log.userId)).size,
        uniqueIPs: new Set(recentLogs.map(log => log.ip)).size,
        suspiciousActivity: recentLogs.filter(log => log.suspicious).length,
        timeFrame: `${timeFrame} hours`
      };
      
      stats.successRate = stats.totalAttempts > 0 ? 
        (stats.successfulLogins / stats.totalAttempts * 100).toFixed(2) + '%' : '0%';
      
      return stats;
    } catch (error) {
      console.error('‚ùå Failed to get security stats:', error);
      return null;
    }
  }

  // ◊¢◊ñ◊® ◊ú◊ß◊®◊ô◊ê◊™ ◊ß◊ë◊¶◊ô JSON
  async readLogFile(filePath) {
    try {
      const data = await fs.readFile(filePath, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.error(`‚ùå Failed to read log file ${filePath}:`, error);
      return [];
    }
  }

  // ◊†◊ô◊ß◊ï◊ô ◊ú◊ï◊í◊ô◊ù ◊ô◊©◊†◊ô◊ù (◊ú◊¶◊ï◊®◊õ◊ô ◊™◊ó◊ñ◊ï◊ß◊î)
  async cleanupOldLogs(daysToKeep = 30) {
    try {
      const cutoffDate = new Date(Date.now() - daysToKeep * 24 * 60 * 60 * 1000);
      
      // ◊†◊ô◊ß◊ï◊ô ◊ú◊ï◊í◊ô ◊î◊™◊ó◊ë◊®◊ï◊™
      const authLogs = await this.readLogFile(this.authLogFile);
      const recentAuthLogs = authLogs.filter(log => new Date(log.timestamp) > cutoffDate);
      await fs.writeFile(this.authLogFile, JSON.stringify(recentAuthLogs, null, 2));
      
      console.log(`üßπ Cleaned up old logs, kept ${recentAuthLogs.length} auth logs from last ${daysToKeep} days`);
      
      return {
        authLogsRemaining: recentAuthLogs.length,
        cleanupDate: new Date().toISOString()
      };
    } catch (error) {
      console.error('‚ùå Failed to cleanup old logs:', error);
      return null;
    }
  }
}

module.exports = new DatabaseLogger();
