rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // 🛡️ Tasks Collection - רק המשתמש יכול לגשת למשימות שלו
    match /tasks/{taskId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && validateTask(request.resource.data);
    }
    
    // 🛡️ Chat Messages - רק המשתמש יכול לגשת להודעות שלו
    match /chat_messages/{messageId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && validateChatMessage(request.resource.data);
    }
    
    // 🛡️ User Profiles - רק המשתמש יכול לגשת לפרופיל שלו
    match /users/{userId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == userId;
    }
    
    // 🚫 הכל אחר - אסור
    match /{document=**} {
      allow read, write: if false;
    }
  }
  
  // 📝 ולידציה למשימות
  function validateTask(task) {
    return task.keys().hasAll(['title', 'completed', 'createdAt', 'updatedAt', 'userId'])
      && task.title is string
      && task.title.size() > 0
      && task.title.size() <= 200
      && task.completed is bool
      && task.userId is string
      && task.createdAt is timestamp
      && task.updatedAt is timestamp;
  }
  
  // 💬 ולידציה להודעות צ'אט
  function validateChatMessage(message) {
    return message.keys().hasAll(['content', 'sender', 'timestamp', 'userId'])
      && message.content is string
      && message.content.size() > 0
      && message.content.size() <= 5000
      && message.sender in ['user', 'ai']
      && message.userId is string
      && message.timestamp is timestamp;
  }
}